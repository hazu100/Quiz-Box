{"version":3,"sources":["questionAnswers.js","questionGenerator.js","App.js","serviceWorker.js","index.js"],"names":["questions","question","answers","rightAnswer","id","n","Promise","resolve","sort","Math","random","slice","QuestionGenerator","state","userAnswer","props","setAnswer","answer","setState","className","this","map","onClick","selected","Component","QuizApp","score","responses","getQuestions","Questions","then","computerScore","questionObjcet","correctAnswer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wNAAMA,G,MAAY,CACd,CACIC,SAAU,4BACVC,QAAS,CAAC,UAAW,QAAS,UAAW,QACzCC,YAAa,QACbC,GAAI,UAGR,CACIH,SAAU,wBACVC,QAAS,CAAC,WAAY,WAAY,WAAY,UAC9CC,YAAa,WACbC,GAAI,UAGR,CACIH,SAAU,mBACVC,QAAS,CAAC,KAAM,KAAM,MAAO,MAC7BC,YAAa,KACbC,GAAI,UAGR,CACIH,SAAU,kCACVC,QAAS,CAAC,SAAU,QAAS,QAAS,UACtCC,YAAa,QACbC,GAAI,UAGR,CACIH,SAAU,+CACVC,QAAS,CAAC,SAAU,YAAa,UAAW,QAC5CC,YAAa,OACbC,GAAI,UAGR,CACIH,SAAU,0BACVC,QAAS,CAAC,UAAW,YAAa,SAAU,cAC5CC,YAAa,YACbC,GAAI,UAGR,CACIH,SAAU,kCACVC,QAAS,CAAC,eAAgB,aAC1BC,YAAa,eACbC,GAAI,UAGR,CACIH,SAAU,4BACVC,QAAS,CAAC,aAAc,cACxBC,YAAa,aACbC,GAAI,YAIG,iBAACC,EAAD,uDAAK,EAAL,OAAYC,QAAQC,QAAQP,EAAUQ,MAAK,iBAAI,GAAIC,KAAKC,YAAUC,MAAM,EAAEN,K,OCjC1EO,G,kNAtBXC,MAAQ,CACJC,WAAW,YAAK,EAAKC,MAAMb,U,EAG/Bc,UAAY,SAACC,GACT,EAAKC,SAAS,CACVJ,WAAY,CAACG,M,uDAGX,IAAD,OACL,OACI,yBAAKE,UAAU,eACX,6BAAMC,KAAKL,MAAMd,UAChBmB,KAAKP,MAAMC,WAAWO,KAAI,SAACJ,GAAD,OAAa,4BACpCK,QAAS,WAAM,EAAKN,UAAUC,GAAS,EAAKF,MAAMQ,SAASN,KAE1DA,W,GAjBWO,cCkDjBC,E,4MA7CXZ,MAAQ,CACJb,UAAW,GACX0B,MAAO,EACPC,UAAW,G,EAGfC,aAAe,WACXC,IAAYC,MAAK,SAAC7B,GACd,EAAKiB,SAAS,CACVlB,UAAWC,Q,EAIvB8B,cAAgB,SAACd,EAAQd,GACjBc,IAAWd,GACX,EAAKe,SAAS,CACVQ,MAAO,EAAKb,MAAMa,MAAQ,IAGlC,EAAKR,SAAS,CACVS,UAAW,EAAKd,MAAMc,UAAY,K,kEAKtCP,KAAKQ,iB,+BAGC,IAAD,OACL,OACI,yBAAKT,UAAU,WACX,yBAAKA,UAAU,cAAf,QAEIC,KAAKP,MAAMc,UAAY,EACnBP,KAAKP,MAAMb,UAAUqB,KAAI,SAACW,GAAD,OACrB,kBAAC,EAAD,CAAmB/B,SAAU+B,EAAe/B,SAAUC,QAAS8B,EAAe9B,QAC1E+B,cAAeD,EAAe7B,YAC9BoB,SAAU,SAACN,GAAD,OAAY,EAAKc,cAAcd,EAAQe,EAAe7B,mBAEnE,+CAAqBiB,KAAKP,MAAMa,MAAhC,W,GAzCPF,aCOFU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ed4807fd.chunk.js","sourcesContent":["const questions = [\r\n    {\r\n        question: \"What is Pili's nick name?\",\r\n        answers: [\"Abhisek\", \"Binku\", \"Kanduni\", \"Hazu\"],\r\n        rightAnswer: \"Binku\",\r\n        id: \"123456\",\r\n    },\r\n\r\n    {\r\n        question: \"What is Pili's D.O.B?\",\r\n        answers: [\"12th Dec\", \"13th Aug\", \"11th Dec\", \"29 Feb\"],\r\n        rightAnswer: \"13th Aug\",\r\n        id: \"458695\",\r\n    }\r\n    ,\r\n    {\r\n        question: \"How old is Pili?\",\r\n        answers: [\"23\", \"73\", \"100\", \"50\"],\r\n        rightAnswer: \"23\",\r\n        id: \"858605\",\r\n    },\r\n\r\n    {\r\n        question: \"One of Pili's favourite colors?\",\r\n        answers: [\"Orange\", \"Green\", \"Black\", \"Golden\"],\r\n        rightAnswer: \"Black\",\r\n        id: \"323856\",\r\n    },\r\n\r\n    {\r\n        question: \"Which cartoon character does Hazu look like?\",\r\n        answers: [\"Nobita\", \"kochikame\", \"Shizuka\", \"Gian\"],\r\n        rightAnswer: \"Gian\",\r\n        id: \"128476\",\r\n    },\r\n\r\n    {\r\n        question: \"Where is Hazu's office?\",\r\n        answers: [\"Kolkata\", \"Bangalore\", \"Mumbai\", \"Jalpaiguri\"],\r\n        rightAnswer: \"Bangalore\",\r\n        id: \"128470\",\r\n    },\r\n\r\n    {\r\n        question: \"Where does Pili like to travel?\",\r\n        answers: [\"Hill Station\", \"Sea Beach\"],\r\n        rightAnswer: \"Hill Station\",\r\n        id: \"128477\",\r\n    },\r\n\r\n    {\r\n        question: \"What does Pili like more?\",\r\n        answers: [\"Ice creams\", \"Chocolates\"],\r\n        rightAnswer: \"Chocolates\",\r\n        id: \"128479\",\r\n    },\r\n];\r\n\r\nexport default (n = 5) =>  Promise.resolve(questions.sort(()=>0.5-Math.random()).slice(0,n));\r\n","import React, { Component } from 'react';\r\nimport './questionGenerator.css';\r\nclass QuestionGenerator extends Component {\r\n    state = {\r\n        userAnswer: [...this.props.answers],\r\n    };\r\n\r\n    setAnswer = (answer) => {\r\n        this.setState({\r\n            userAnswer: [answer],\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"questionBox\">\r\n                <div>{this.props.question}</div>\r\n                {this.state.userAnswer.map((answer) => (<button\r\n                    onClick={()=> {this.setAnswer(answer); this.props.selected(answer);}}\r\n                  >\r\n                    {answer}</button>))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionGenerator;","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\nimport Questions from \"./questionAnswers\";\r\nimport QuestionGenerator from './questionGenerator';\r\n\r\nclass QuizApp extends Component {\r\n\r\n    state = {\r\n        questions: [],\r\n        score: 0,\r\n        responses: 0,\r\n    };\r\n\r\n    getQuestions = () => {\r\n        Questions().then((question) => {\r\n            this.setState({\r\n                questions: question,\r\n            })\r\n        })\r\n    }\r\n    computerScore = (answer, rightAnswer) => {\r\n        if (answer === rightAnswer) {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n            })\r\n        }\r\n        this.setState({\r\n            responses: this.state.responses + 1,\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestions();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='quizBox'>\r\n                <div className='quizHeader'>QUIZ</div>\r\n                {\r\n                    this.state.responses < 5 ?\r\n                        this.state.questions.map((questionObjcet) => (\r\n                            <QuestionGenerator question={questionObjcet.question} answers={questionObjcet.answers}\r\n                                correctAnswer={questionObjcet.rightAnswer}\r\n                                selected={(answer) => this.computerScore(answer, questionObjcet.rightAnswer)}\r\n                            />\r\n                        )) : <h1>Your score is : {this.state.score}/5</h1>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuizApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport QuizApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QuizApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}